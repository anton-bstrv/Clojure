(defn increasingSubsequences [arr i]
                 (def subseq [(.get arr i),])
                 (println "Current item" subseq)
                  (
                   (fn f [arr j]
                    (when(> (.get arr j) (last subseq))
                        (def subseq(conj subseq (.get arr j)))
                        (println subseq)
                      )
                    (when (< j (-(count arr) 1))
                        (f arr (inc j))
                      )
                    )
                   arr (inc i)
                   )
                 (when (< i (- (count arr) 2)) (increasingSubsequences arr (inc i)))
  )

(increasingSubsequences [6, 1, 2, 8, 3, 7, 9, 14, 1, 3, 7] 0)
